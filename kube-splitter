#!/bin/bash

set -eo pipefail

# Default Variables
VERBOSE="false"

function main() {
  while getopts ":f:o:dvhV" flag; do
    case "${flag}" in
      d) DRY_RUN="true" ;;
      f) INPUT_FILE=$OPTARG;;
      o) OUTPUT_DIR=$OPTARG;;
      V) version ;;
      v) VERBOSE="true" ;;
      h) usage ;;
      :) printf "missing argument for -%s\n" "$OPTARG" >&2; echo "$usage" >&2; exit 1;;
     \?) error "Unexpected flag $OPTARG"; usage; exit 1;;
    esac
  done

  readonly INPUT_FILE
  readonly OUTPUT_DIR
  readonly VERBOSE

  if [[ "${VERBOSE}" == "true" ]]; then
    set -x
  fi

  if [ ! "$INPUT_FILE" ]; then
    echo "argument -f must be provided".
    usage 
    exit 1
  fi

  if [ ! "$OUTPUT_DIR" ]; then
    echo "argument -o must be provided".
    usage 
    exit 1
  fi

  splitter
}

function error() {
  local err_message
  err_message="$1"

  echo "${err_message}" >&2
  exit 1

}

function usage() {
  printf 'Usage: kube-splitter [options]

Options:
  -d        Only prints the content that would be created, without creating it.
  -f        Filename or URL to files to use.
  -h        Shows this screen.
  -o        Output directory where to write the files.
  -v        Prints every line this script executes.
  -V        Shows version.

'
  exit 0
}

function version() {
  printf 'kube-splitter (https://github.com/kevintijssen/kube-splitter/) version v0.0.1

Seperates a single Kubernetes YAML file in multiple files based-on there Kind
'
  exit 0
}

function splitter() {
    # Check if yq is installed
    if ! command -v yq &> /dev/null; then
      echo "yq is not installed. Please install it before running this script."
      exit 1
    fi

    # Loop through the YAML file and split by kind
    for kind in $(yq eval '.kind' "$INPUT_FILE" | sort -u | grep -v -- '---'); do
      if [[ "${DRY_RUN}" == "true" ]]; then
        echo "### ${kind,,}.yaml ###"
        yq eval-all "select(.kind == \"$kind\")" $INPUT_FILE
      else
        # Create a directory to store split YAML files
        mkdir -p "$OUTPUT_DIR"
        yq eval-all "select(.kind == \"$kind\")" $INPUT_FILE > "$OUTPUT_DIR/${kind,,}.yaml"
      fi
    done
}

main "$@"